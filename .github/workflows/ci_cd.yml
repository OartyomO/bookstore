name: CI Pipeline - Build, Scan & Push

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-scan-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Build Docker images for each service using their Dockerfile.dev
      - name: Build Server Image
        run: |
          docker build -f server/Dockerfile.dev -t bookstore_server:latest server
      
      - name: Build Client Image
        run: |
          docker build -f client/Dockerfile.dev -t bookstore_client:latest client
      
      - name: Build Nginx Image
        run: |
          docker build -f nginx/Dockerfile.dev -t bookstore_nginx:latest nginx

      # Run vulnerability scans on each built image using Trivy, but do not fail the pipeline if vulnerabilities are found
      - name: Scan Server Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_server:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Scan Client Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_client:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Scan Nginx Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_nginx:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      # OPTIONAL: Push images to AWS ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Login to AWS ECR
      #   env:
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      #   run: |
      #     aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push Server Image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_SERVER: ${{ secrets.ECR_REPOSITORY_SERVER }}
        run: |
          docker tag bookstore_server:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVER:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVER:latest

      - name: Tag and Push Client Image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_CLIENT: ${{ secrets.ECR_REPOSITORY_CLIENT }}
        run: |
          docker tag bookstore_client:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENT:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENT:latest

      - name: Tag and Push Nginx Image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NGINX: ${{ secrets.ECR_REPOSITORY_NGINX }}
        run: |
          docker tag bookstore_nginx:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NGINX:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NGINX:latest

      - name: SSH into EC2 and Install AWS CLI
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Update package list and install unzip utility
            sudo apt-get update
            sudo apt-get install -y unzip curl

            # Check if AWS CLI is installed, if not, install it
            if ! command -v aws &> /dev/null; then
              echo "AWS CLI not found, installing..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            # Verify AWS CLI installation
            aws --version

            # Set AWS credentials directly using environment variables
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}

            # Verify AWS CLI authentication by listing S3 buckets (example command)
            aws s3 ls

            # Log in to AWS ECR using the AWS CLI (non-interactive)
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            # Run a simple Docker command to check ECR login status
            docker info

            # Optionally, test pulling an image
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_SERVER }}:latest
            
      - name: Copy docker-compose.yml via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/"
      
      - name: Copy nginx folder via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./nginx"
          target: "/home/ubuntu/"
      
      - name: Copy client folder via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./client"
          target: "/home/ubuntu/"
      
      - name: Copy server folder via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./server"
          target: "/home/ubuntu/"

      - name: run Docker Compose command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/
            docker compose up -d
            